### BTest baseline data generated by btest-diff. Do not edit. Use "btest -U/-u" to update. Requires BTest >= 0.63.
module foo {

import spicy_rt;
import hilti;

type A = struct {
    optional<iterator<stream>> __begin &internal &needed-by-feature="uses_random_access";
    optional<iterator<stream>> __position &internal &needed-by-feature="uses_random_access";
    optional<iterator<stream>> __position_update &internal &needed-by-feature="uses_random_access";
    spicy_rt::Parser __parser &static &internal &needed-by-feature="supports_filters" &needed-by-feature="supports_sinks";
    spicy_rt::SinkState __sink &internal &needed-by-feature="supports_sinks";
    strong_ref<spicy_rt::Filters> __filters &internal &needed-by-feature="supports_filters";
    optional<hilti::RecoverableFailure> __error &always-emit &internal;
    hook void __on_0x25_init() ;
    hook void __on_0x25_done() ;
    hook void __on_0x25_error(string __except) ;
    hook optional<string> __str__() ;
    hook void __on_0x25_finally() ;
    hook void __on_0x25_confirmed() &needed-by-feature="synchronization";
    hook void __on_0x25_rejected() &needed-by-feature="synchronization";
    hook void __on_0x25_synced() &needed-by-feature="synchronization";
    hook void __on_0x25_gap(uint<64> seq, uint<64> len) ;
    hook void __on_0x25_overlap(uint<64> seq, bytes old, bytes new_) ;
    hook void __on_0x25_skipped(uint<64> seq) ;
    hook void __on_0x25_undelivered(uint<64> seq, bytes data) ;
    method tuple<view<stream>, int<64>, iterator<stream>, optional<hilti::RecoverableFailure>> __parse_stage1(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error);
    method extern view<stream> parse1(inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;
    method extern view<stream> parse2(inout value_ref<A> unit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;
    method extern view<stream> parse3(inout value_ref<spicy_rt::ParsedUnit> gunit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;
    method tuple<view<stream>, int<64>, iterator<stream>, optional<hilti::RecoverableFailure>> __parse_foo_A_stage2(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error);
} &on-heap;
public type B = struct {
    optional<iterator<stream>> __begin &internal &needed-by-feature="uses_random_access";
    optional<iterator<stream>> __position &internal &needed-by-feature="uses_random_access";
    optional<iterator<stream>> __position_update &internal &needed-by-feature="uses_random_access";
    spicy_rt::Parser __parser &static &internal &needed-by-feature="supports_filters" &always-emit;
    spicy_rt::SinkState __sink &internal &needed-by-feature="supports_sinks";
    strong_ref<spicy_rt::Filters> __filters &internal &needed-by-feature="supports_filters";
    optional<hilti::RecoverableFailure> __error &always-emit &internal;
    hook void __on_0x25_init() ;
    hook void __on_0x25_done() ;
    hook void __on_0x25_error(string __except) ;
    hook optional<string> __str__() ;
    hook void __on_0x25_finally() ;
    hook void __on_0x25_confirmed() &needed-by-feature="synchronization";
    hook void __on_0x25_rejected() &needed-by-feature="synchronization";
    hook void __on_0x25_synced() &needed-by-feature="synchronization";
    hook void __on_0x25_gap(uint<64> seq, uint<64> len) ;
    hook void __on_0x25_overlap(uint<64> seq, bytes old, bytes new_) ;
    hook void __on_0x25_skipped(uint<64> seq) ;
    hook void __on_0x25_undelivered(uint<64> seq, bytes data) ;
    method tuple<view<stream>, int<64>, iterator<stream>, optional<hilti::RecoverableFailure>> __parse_stage1(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error);
    method extern view<stream> parse1(inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;
    method extern view<stream> parse2(inout value_ref<B> unit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;
    method extern view<stream> parse3(inout value_ref<spicy_rt::ParsedUnit> gunit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;
    method tuple<view<stream>, int<64>, iterator<stream>, optional<hilti::RecoverableFailure>> __parse_foo_B_stage2(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error);
} &on-heap;
type C = struct {
    optional<iterator<stream>> __begin &internal &needed-by-feature="uses_random_access";
    optional<iterator<stream>> __position &internal &needed-by-feature="uses_random_access";
    optional<iterator<stream>> __position_update &internal &needed-by-feature="uses_random_access";
    spicy_rt::Parser __parser &static &internal &needed-by-feature="supports_filters" &needed-by-feature="supports_sinks";
    spicy_rt::SinkState __sink &internal &needed-by-feature="supports_sinks";
    strong_ref<spicy_rt::Filters> __filters &internal &needed-by-feature="supports_filters";
    optional<hilti::RecoverableFailure> __error &always-emit &internal;
    hook void __on_0x25_init() ;
    hook void __on_0x25_done() ;
    hook void __on_0x25_error(string __except) ;
    hook optional<string> __str__() ;
    hook void __on_0x25_finally() ;
    hook void __on_0x25_confirmed() &needed-by-feature="synchronization";
    hook void __on_0x25_rejected() &needed-by-feature="synchronization";
    hook void __on_0x25_synced() &needed-by-feature="synchronization";
    hook void __on_0x25_gap(uint<64> seq, uint<64> len) ;
    hook void __on_0x25_overlap(uint<64> seq, bytes old, bytes new_) ;
    hook void __on_0x25_skipped(uint<64> seq) ;
    hook void __on_0x25_undelivered(uint<64> seq, bytes data) ;
    method tuple<view<stream>, int<64>, iterator<stream>, optional<hilti::RecoverableFailure>> __parse_stage1(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error);
    method extern view<stream> parse1(inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;
    method extern view<stream> parse2(inout value_ref<C> unit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;
    method extern view<stream> parse3(inout value_ref<spicy_rt::ParsedUnit> gunit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;
    method tuple<view<stream>, int<64>, iterator<stream>, optional<hilti::RecoverableFailure>> __parse_foo_C_stage2(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error);
} &on-heap;
public type D = struct {
    value_ref<C> anon &optional &anonymous &no-emit;
    optional<iterator<stream>> __begin &internal &needed-by-feature="uses_random_access";
    optional<iterator<stream>> __position &internal &needed-by-feature="uses_random_access";
    optional<iterator<stream>> __position_update &internal &needed-by-feature="uses_random_access";
    spicy_rt::Parser __parser &static &internal &needed-by-feature="supports_filters" &always-emit;
    spicy_rt::SinkState __sink &internal &needed-by-feature="supports_sinks";
    strong_ref<spicy_rt::Filters> __filters &internal &needed-by-feature="supports_filters";
    optional<hilti::RecoverableFailure> __error &always-emit &internal;
    hook void __on_0x25_init() ;
    hook void __on_0x25_done() ;
    hook void __on_0x25_error(string __except) ;
    hook optional<string> __str__() ;
    hook void __on_0x25_finally() ;
    hook void __on_0x25_confirmed() &needed-by-feature="synchronization";
    hook void __on_0x25_rejected() &needed-by-feature="synchronization";
    hook void __on_0x25_synced() &needed-by-feature="synchronization";
    hook void __on_0x25_gap(uint<64> seq, uint<64> len) ;
    hook void __on_0x25_overlap(uint<64> seq, bytes old, bytes new_) ;
    hook void __on_0x25_skipped(uint<64> seq) ;
    hook void __on_0x25_undelivered(uint<64> seq, bytes data) ;
    method tuple<view<stream>, int<64>, iterator<stream>, optional<hilti::RecoverableFailure>> __parse_stage1(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error);
    method extern view<stream> parse1(inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;
    method extern view<stream> parse2(inout value_ref<D> unit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;
    method extern view<stream> parse3(inout value_ref<spicy_rt::ParsedUnit> gunit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;
    method tuple<view<stream>, int<64>, iterator<stream>, optional<hilti::RecoverableFailure>> __parse_foo_D_stage2(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error);
} &on-heap;
type F = struct {
    optional<iterator<stream>> __begin &internal &needed-by-feature="uses_random_access";
    optional<iterator<stream>> __position &internal &needed-by-feature="uses_random_access";
    optional<iterator<stream>> __position_update &internal &needed-by-feature="uses_random_access";
    spicy_rt::Parser __parser &static &internal &needed-by-feature="supports_filters" &needed-by-feature="supports_sinks" &needed-by-feature="is_filter";
    spicy_rt::SinkState __sink &internal &needed-by-feature="supports_sinks";
    strong_ref<spicy_rt::Filters> __filters &internal &needed-by-feature="supports_filters";
    weak_ref<spicy_rt::Forward> __forward &internal &needed-by-feature="is_filter";
    optional<hilti::RecoverableFailure> __error &always-emit &internal;
    hook void __on_0x25_init() ;
    hook void __on_0x25_done() ;
    hook void __on_0x25_error(string __except) ;
    hook optional<string> __str__() ;
    hook void __on_0x25_finally() ;
    hook void __on_0x25_confirmed() &needed-by-feature="synchronization";
    hook void __on_0x25_rejected() &needed-by-feature="synchronization";
    hook void __on_0x25_synced() &needed-by-feature="synchronization";
    hook void __on_0x25_gap(uint<64> seq, uint<64> len) ;
    hook void __on_0x25_overlap(uint<64> seq, bytes old, bytes new_) ;
    hook void __on_0x25_skipped(uint<64> seq) ;
    hook void __on_0x25_undelivered(uint<64> seq, bytes data) ;
    method tuple<view<stream>, int<64>, iterator<stream>, optional<hilti::RecoverableFailure>> __parse_stage1(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error);
    method extern view<stream> parse1(inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;
    method extern view<stream> parse2(inout value_ref<F> unit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;
    method extern view<stream> parse3(inout value_ref<spicy_rt::ParsedUnit> gunit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;
    method tuple<view<stream>, int<64>, iterator<stream>, optional<hilti::RecoverableFailure>> __parse_foo_F_stage2(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error);
} &on-heap;

public const bool __feat%foo@@A%uses_random_access = True;
public const bool __feat%foo@@A%is_filter = False;
public const bool __feat%foo@@A%supports_filters = True;
public const bool __feat%foo@@A%supports_sinks = True;
public const bool __feat%foo@@A%synchronization = True;
public const bool __feat%foo@@B%uses_random_access = True;
public const bool __feat%foo@@B%is_filter = False;
public const bool __feat%foo@@B%supports_filters = True;
public const bool __feat%foo@@B%supports_sinks = True;
public const bool __feat%foo@@B%synchronization = True;
public const bool __feat%foo@@C%uses_random_access = True;
public const bool __feat%foo@@C%is_filter = False;
public const bool __feat%foo@@C%supports_filters = True;
public const bool __feat%foo@@C%supports_sinks = True;
public const bool __feat%foo@@C%synchronization = True;
public const bool __feat%foo@@D%uses_random_access = True;
public const bool __feat%foo@@D%is_filter = False;
public const bool __feat%foo@@D%supports_filters = True;
public const bool __feat%foo@@D%supports_sinks = True;
public const bool __feat%foo@@D%synchronization = True;
public const bool __feat%foo@@F%uses_random_access = True;
public const bool __feat%foo@@F%is_filter = True;
public const bool __feat%foo@@F%supports_filters = True;
public const bool __feat%foo@@F%supports_sinks = True;
public const bool __feat%foo@@F%synchronization = True;

function void f1() {
}

public function void f2() {
}

method method tuple<view<stream>, int<64>, iterator<stream>, optional<hilti::RecoverableFailure>> foo::A::__parse_stage1(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error) {
    # "<...>/unused-functions.spicy:18:10"
    local tuple<view<stream>, int<64>, iterator<stream>, optional<hilti::RecoverableFailure>> __result;
    try {

        if ( __feat%foo@@A%uses_random_access ) 
            __trim = False;

        hilti::debugIndent("spicy");

        if ( __feat%foo@@A%uses_random_access ) {
            (*self).__begin = begin(__cur);
            (*self).__position = begin(__cur);
        }

        (*self).__error = __error;

        if ( __feat%foo@@A%uses_random_access ) 
            (*self).__position_update = Null;

        (*self).__on_0x25_init();

        if ( __feat%foo@@A%uses_random_access ) 

            if ( (*self).__position_update ) {
                __cur = __cur.advance((*(*self).__position_update));
                (*self).__position_update = Null;
            }


        __error = (*self).__error;
        local strong_ref<stream> filtered = Null;

        if ( __feat%foo@@A%supports_filters ) 

            if ( filtered = spicy_rt::filter_init(self, __data, __cur) ) {
                local value_ref<stream> filtered_data = filtered;
                (*self).__parse_foo_A_stage2(filtered_data, (*filtered_data), __trim, __lah, __lahe, __error);
                __cur = __cur.advance(|__cur|);

                if ( __trim ) 
                    (*__data).trim(begin(__cur));

                __result = (__cur, __lah, __lahe, __error);
            }



        if ( ! filtered ) 
            __result = (*self).__parse_foo_A_stage2(__data, __cur, __trim, __lah, __lahe, __error);

    }
    catch ( hilti::SystemException __except ) {

        if ( __feat%foo@@A%uses_random_access ) 
            (*self).__position = begin(__cur);

        (*self).__on_0x25_error(hilti::exception_what(__except));

        if ( __feat%foo@@A%supports_filters ) 
            spicy_rt::filter_disconnect(self);

        (*self).__error = __error;

        if ( __feat%foo@@A%uses_random_access ) 
            (*self).__position_update = Null;

        (*self).__on_0x25_finally();

        if ( __feat%foo@@A%uses_random_access ) 

            if ( (*self).__position_update ) {
                __cur = __cur.advance((*(*self).__position_update));
                (*self).__position_update = Null;
            }


        __error = (*self).__error;
        throw;
    }

    (*self).__error = __error;

    if ( __feat%foo@@A%uses_random_access ) 
        (*self).__position_update = Null;

    (*self).__on_0x25_finally();

    if ( __feat%foo@@A%uses_random_access ) 

        if ( (*self).__position_update ) {
            __cur = __cur.advance((*(*self).__position_update));
            (*self).__position_update = Null;
        }


    __error = (*self).__error;
    return __result;
}

method method tuple<view<stream>, int<64>, iterator<stream>, optional<hilti::RecoverableFailure>> foo::A::__parse_foo_A_stage2(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error) {
    # "<...>/unused-functions.spicy:18:10"
    local tuple<view<stream>, int<64>, iterator<stream>, optional<hilti::RecoverableFailure>> __result;

    if ( __feat%foo@@A%uses_random_access ) 
        (*self).__position = begin(__cur);

    (*self).__error = __error;

    if ( __feat%foo@@A%uses_random_access ) 
        (*self).__position_update = Null;

    (*self).__on_0x25_done();

    if ( __feat%foo@@A%uses_random_access ) 

        if ( (*self).__position_update ) {
            __cur = __cur.advance((*(*self).__position_update));
            (*self).__position_update = Null;
        }


    __error = (*self).__error;

    if ( __feat%foo@@A%supports_filters ) 
        spicy_rt::filter_disconnect(self);

    hilti::debugDedent("spicy");
    __result = (__cur, __lah, __lahe, __error);
    return __result;
}

method extern method view<stream> foo::A::parse1(inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static {
    # "<...>/unused-functions.spicy:18:10"
    local value_ref<A> unit = value_ref(default<A>())value_ref(default<A>());
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;
    local optional<hilti::RecoverableFailure> error = Null;
    # "<...>/unused-functions.spicy:18:10"

    # Begin parsing production: Unit: foo_A ->
    (ncur, lahead, lahead_end, error) = (*unit).__parse_stage1(data, ncur, True, lahead, lahead_end, error);
    # End parsing production: Unit: foo_A ->

    if ( __feat%foo@@A%uses_random_access ) 
        (*unit).__position = begin(ncur);


    if ( error ) 
        throw ;

    return ncur;
}

method extern method view<stream> foo::A::parse3(inout value_ref<spicy_rt::ParsedUnit> gunit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static {
    # "<...>/unused-functions.spicy:18:10"
    local value_ref<A> unit = value_ref(default<A>())value_ref(default<A>());
    spicy_rt::initializeParsedUnit(gunit, unit, typeinfo(A));
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;
    local optional<hilti::RecoverableFailure> error = Null;
    # "<...>/unused-functions.spicy:18:10"

    # Begin parsing production: Unit: foo_A ->
    (ncur, lahead, lahead_end, error) = (*unit).__parse_stage1(data, ncur, True, lahead, lahead_end, error);
    # End parsing production: Unit: foo_A ->

    if ( __feat%foo@@A%uses_random_access ) 
        (*unit).__position = begin(ncur);


    if ( error ) 
        throw ;

    return ncur;
}

method extern method view<stream> foo::A::parse2(inout value_ref<A> unit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static {
    # "<...>/unused-functions.spicy:18:10"
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;
    local optional<hilti::RecoverableFailure> error = Null;
    # "<...>/unused-functions.spicy:18:10"

    # Begin parsing production: Unit: foo_A ->
    (ncur, lahead, lahead_end, error) = (*unit).__parse_stage1(data, ncur, True, lahead, lahead_end, error);
    # End parsing production: Unit: foo_A ->

    if ( __feat%foo@@A%uses_random_access ) 
        (*unit).__position = begin(ncur);


    if ( error ) 
        throw ;

    return ncur;
}

init function void __register_foo_A() {

    if ( __feat%foo@@A%is_filter || __feat%foo@@A%supports_sinks ) {
        foo::A::__parser = [$name="foo::A", $is_public=False, $parse1=foo::A::parse1, $parse2=foo::A::parse2, $parse3=foo::A::parse3, $context_new=Null, $type_info=typeinfo(A), $description="", $mime_types=vector(), $ports=vector()];
        spicy_rt::registerParser(foo::A::__parser, $scope, Null);
    }

}

method method tuple<view<stream>, int<64>, iterator<stream>, optional<hilti::RecoverableFailure>> foo::B::__parse_stage1(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error) {
    # "<...>/unused-functions.spicy:21:17"
    local tuple<view<stream>, int<64>, iterator<stream>, optional<hilti::RecoverableFailure>> __result;
    try {

        if ( __feat%foo@@B%uses_random_access ) 
            __trim = False;

        hilti::debugIndent("spicy");

        if ( __feat%foo@@B%uses_random_access ) {
            (*self).__begin = begin(__cur);
            (*self).__position = begin(__cur);
        }

        (*self).__error = __error;

        if ( __feat%foo@@B%uses_random_access ) 
            (*self).__position_update = Null;

        (*self).__on_0x25_init();

        if ( __feat%foo@@B%uses_random_access ) 

            if ( (*self).__position_update ) {
                __cur = __cur.advance((*(*self).__position_update));
                (*self).__position_update = Null;
            }


        __error = (*self).__error;
        local strong_ref<stream> filtered = Null;

        if ( __feat%foo@@B%supports_filters ) 

            if ( filtered = spicy_rt::filter_init(self, __data, __cur) ) {
                local value_ref<stream> filtered_data = filtered;
                (*self).__parse_foo_B_stage2(filtered_data, (*filtered_data), __trim, __lah, __lahe, __error);
                __cur = __cur.advance(|__cur|);

                if ( __trim ) 
                    (*__data).trim(begin(__cur));

                __result = (__cur, __lah, __lahe, __error);
            }



        if ( ! filtered ) 
            __result = (*self).__parse_foo_B_stage2(__data, __cur, __trim, __lah, __lahe, __error);

    }
    catch ( hilti::SystemException __except ) {

        if ( __feat%foo@@B%uses_random_access ) 
            (*self).__position = begin(__cur);

        (*self).__on_0x25_error(hilti::exception_what(__except));

        if ( __feat%foo@@B%supports_filters ) 
            spicy_rt::filter_disconnect(self);

        (*self).__error = __error;

        if ( __feat%foo@@B%uses_random_access ) 
            (*self).__position_update = Null;

        (*self).__on_0x25_finally();

        if ( __feat%foo@@B%uses_random_access ) 

            if ( (*self).__position_update ) {
                __cur = __cur.advance((*(*self).__position_update));
                (*self).__position_update = Null;
            }


        __error = (*self).__error;
        throw;
    }

    (*self).__error = __error;

    if ( __feat%foo@@B%uses_random_access ) 
        (*self).__position_update = Null;

    (*self).__on_0x25_finally();

    if ( __feat%foo@@B%uses_random_access ) 

        if ( (*self).__position_update ) {
            __cur = __cur.advance((*(*self).__position_update));
            (*self).__position_update = Null;
        }


    __error = (*self).__error;
    return __result;
}

method method tuple<view<stream>, int<64>, iterator<stream>, optional<hilti::RecoverableFailure>> foo::B::__parse_foo_B_stage2(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error) {
    # "<...>/unused-functions.spicy:21:17"
    local tuple<view<stream>, int<64>, iterator<stream>, optional<hilti::RecoverableFailure>> __result;

    if ( __feat%foo@@B%uses_random_access ) 
        (*self).__position = begin(__cur);

    (*self).__error = __error;

    if ( __feat%foo@@B%uses_random_access ) 
        (*self).__position_update = Null;

    (*self).__on_0x25_done();

    if ( __feat%foo@@B%uses_random_access ) 

        if ( (*self).__position_update ) {
            __cur = __cur.advance((*(*self).__position_update));
            (*self).__position_update = Null;
        }


    __error = (*self).__error;

    if ( __feat%foo@@B%supports_filters ) 
        spicy_rt::filter_disconnect(self);

    hilti::debugDedent("spicy");
    __result = (__cur, __lah, __lahe, __error);
    return __result;
}

method extern method view<stream> foo::B::parse1(inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static {
    # "<...>/unused-functions.spicy:21:17"
    local value_ref<B> unit = value_ref(default<B>())value_ref(default<B>());
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;
    local optional<hilti::RecoverableFailure> error = Null;
    # "<...>/unused-functions.spicy:21:17"

    # Begin parsing production: Unit: foo_B ->
    (ncur, lahead, lahead_end, error) = (*unit).__parse_stage1(data, ncur, True, lahead, lahead_end, error);
    # End parsing production: Unit: foo_B ->

    if ( __feat%foo@@B%uses_random_access ) 
        (*unit).__position = begin(ncur);


    if ( error ) 
        throw ;

    return ncur;
}

method extern method view<stream> foo::B::parse3(inout value_ref<spicy_rt::ParsedUnit> gunit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static {
    # "<...>/unused-functions.spicy:21:17"
    local value_ref<B> unit = value_ref(default<B>())value_ref(default<B>());
    spicy_rt::initializeParsedUnit(gunit, unit, typeinfo(B));
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;
    local optional<hilti::RecoverableFailure> error = Null;
    # "<...>/unused-functions.spicy:21:17"

    # Begin parsing production: Unit: foo_B ->
    (ncur, lahead, lahead_end, error) = (*unit).__parse_stage1(data, ncur, True, lahead, lahead_end, error);
    # End parsing production: Unit: foo_B ->

    if ( __feat%foo@@B%uses_random_access ) 
        (*unit).__position = begin(ncur);


    if ( error ) 
        throw ;

    return ncur;
}

method extern method view<stream> foo::B::parse2(inout value_ref<B> unit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static {
    # "<...>/unused-functions.spicy:21:17"
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;
    local optional<hilti::RecoverableFailure> error = Null;
    # "<...>/unused-functions.spicy:21:17"

    # Begin parsing production: Unit: foo_B ->
    (ncur, lahead, lahead_end, error) = (*unit).__parse_stage1(data, ncur, True, lahead, lahead_end, error);
    # End parsing production: Unit: foo_B ->

    if ( __feat%foo@@B%uses_random_access ) 
        (*unit).__position = begin(ncur);


    if ( error ) 
        throw ;

    return ncur;
}

init function void __register_foo_B() {
    foo::B::__parser = [$name="foo::B", $is_public=True, $parse1=foo::B::parse1, $parse2=foo::B::parse2, $parse3=foo::B::parse3, $context_new=Null, $type_info=typeinfo(B), $description="", $mime_types=vector(), $ports=vector()];
    spicy_rt::registerParser(foo::B::__parser, $scope, Null);
}

method method tuple<view<stream>, int<64>, iterator<stream>, optional<hilti::RecoverableFailure>> foo::C::__parse_stage1(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error) {
    # "<...>/unused-functions.spicy:24:10"
    local tuple<view<stream>, int<64>, iterator<stream>, optional<hilti::RecoverableFailure>> __result;
    try {

        if ( __feat%foo@@C%uses_random_access ) 
            __trim = False;

        hilti::debugIndent("spicy");

        if ( __feat%foo@@C%uses_random_access ) {
            (*self).__begin = begin(__cur);
            (*self).__position = begin(__cur);
        }

        (*self).__error = __error;

        if ( __feat%foo@@C%uses_random_access ) 
            (*self).__position_update = Null;

        (*self).__on_0x25_init();

        if ( __feat%foo@@C%uses_random_access ) 

            if ( (*self).__position_update ) {
                __cur = __cur.advance((*(*self).__position_update));
                (*self).__position_update = Null;
            }


        __error = (*self).__error;
        local strong_ref<stream> filtered = Null;

        if ( __feat%foo@@C%supports_filters ) 

            if ( filtered = spicy_rt::filter_init(self, __data, __cur) ) {
                local value_ref<stream> filtered_data = filtered;
                (*self).__parse_foo_C_stage2(filtered_data, (*filtered_data), __trim, __lah, __lahe, __error);
                __cur = __cur.advance(|__cur|);

                if ( __trim ) 
                    (*__data).trim(begin(__cur));

                __result = (__cur, __lah, __lahe, __error);
            }



        if ( ! filtered ) 
            __result = (*self).__parse_foo_C_stage2(__data, __cur, __trim, __lah, __lahe, __error);

    }
    catch ( hilti::SystemException __except ) {

        if ( __feat%foo@@C%uses_random_access ) 
            (*self).__position = begin(__cur);

        (*self).__on_0x25_error(hilti::exception_what(__except));

        if ( __feat%foo@@C%supports_filters ) 
            spicy_rt::filter_disconnect(self);

        (*self).__error = __error;

        if ( __feat%foo@@C%uses_random_access ) 
            (*self).__position_update = Null;

        (*self).__on_0x25_finally();

        if ( __feat%foo@@C%uses_random_access ) 

            if ( (*self).__position_update ) {
                __cur = __cur.advance((*(*self).__position_update));
                (*self).__position_update = Null;
            }


        __error = (*self).__error;
        throw;
    }

    (*self).__error = __error;

    if ( __feat%foo@@C%uses_random_access ) 
        (*self).__position_update = Null;

    (*self).__on_0x25_finally();

    if ( __feat%foo@@C%uses_random_access ) 

        if ( (*self).__position_update ) {
            __cur = __cur.advance((*(*self).__position_update));
            (*self).__position_update = Null;
        }


    __error = (*self).__error;
    return __result;
}

method method tuple<view<stream>, int<64>, iterator<stream>, optional<hilti::RecoverableFailure>> foo::C::__parse_foo_C_stage2(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error) {
    # "<...>/unused-functions.spicy:24:10"
    local tuple<view<stream>, int<64>, iterator<stream>, optional<hilti::RecoverableFailure>> __result;

    if ( __feat%foo@@C%uses_random_access ) 
        (*self).__position = begin(__cur);

    (*self).__error = __error;

    if ( __feat%foo@@C%uses_random_access ) 
        (*self).__position_update = Null;

    (*self).__on_0x25_done();

    if ( __feat%foo@@C%uses_random_access ) 

        if ( (*self).__position_update ) {
            __cur = __cur.advance((*(*self).__position_update));
            (*self).__position_update = Null;
        }


    __error = (*self).__error;

    if ( __feat%foo@@C%supports_filters ) 
        spicy_rt::filter_disconnect(self);

    hilti::debugDedent("spicy");
    __result = (__cur, __lah, __lahe, __error);
    return __result;
}

method extern method view<stream> foo::C::parse1(inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static {
    # "<...>/unused-functions.spicy:24:10"
    local value_ref<C> unit = value_ref(default<C>())value_ref(default<C>());
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;
    local optional<hilti::RecoverableFailure> error = Null;
    # "<...>/unused-functions.spicy:24:10"

    # Begin parsing production: Unit: foo_C ->
    (ncur, lahead, lahead_end, error) = (*unit).__parse_stage1(data, ncur, True, lahead, lahead_end, error);
    # End parsing production: Unit: foo_C ->

    if ( __feat%foo@@C%uses_random_access ) 
        (*unit).__position = begin(ncur);


    if ( error ) 
        throw ;

    return ncur;
}

method extern method view<stream> foo::C::parse3(inout value_ref<spicy_rt::ParsedUnit> gunit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static {
    # "<...>/unused-functions.spicy:24:10"
    local value_ref<C> unit = value_ref(default<C>())value_ref(default<C>());
    spicy_rt::initializeParsedUnit(gunit, unit, typeinfo(C));
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;
    local optional<hilti::RecoverableFailure> error = Null;
    # "<...>/unused-functions.spicy:24:10"

    # Begin parsing production: Unit: foo_C ->
    (ncur, lahead, lahead_end, error) = (*unit).__parse_stage1(data, ncur, True, lahead, lahead_end, error);
    # End parsing production: Unit: foo_C ->

    if ( __feat%foo@@C%uses_random_access ) 
        (*unit).__position = begin(ncur);


    if ( error ) 
        throw ;

    return ncur;
}

method extern method view<stream> foo::C::parse2(inout value_ref<C> unit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static {
    # "<...>/unused-functions.spicy:24:10"
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;
    local optional<hilti::RecoverableFailure> error = Null;
    # "<...>/unused-functions.spicy:24:10"

    # Begin parsing production: Unit: foo_C ->
    (ncur, lahead, lahead_end, error) = (*unit).__parse_stage1(data, ncur, True, lahead, lahead_end, error);
    # End parsing production: Unit: foo_C ->

    if ( __feat%foo@@C%uses_random_access ) 
        (*unit).__position = begin(ncur);


    if ( error ) 
        throw ;

    return ncur;
}

init function void __register_foo_C() {

    if ( __feat%foo@@C%is_filter || __feat%foo@@C%supports_sinks ) {
        foo::C::__parser = [$name="foo::C", $is_public=False, $parse1=foo::C::parse1, $parse2=foo::C::parse2, $parse3=foo::C::parse3, $context_new=Null, $type_info=typeinfo(C), $description="", $mime_types=vector(), $ports=vector()];
        spicy_rt::registerParser(foo::C::__parser, $scope, Null);
    }

}

method method tuple<view<stream>, int<64>, iterator<stream>, optional<hilti::RecoverableFailure>> foo::D::__parse_stage1(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error) {
    # "<...>/unused-functions.spicy:25:17-27:2"
    local tuple<view<stream>, int<64>, iterator<stream>, optional<hilti::RecoverableFailure>> __result;
    try {

        if ( __feat%foo@@D%uses_random_access ) 
            __trim = False;

        hilti::debugIndent("spicy");

        if ( __feat%foo@@D%uses_random_access ) {
            (*self).__begin = begin(__cur);
            (*self).__position = begin(__cur);
        }

        (*self).__error = __error;

        if ( __feat%foo@@D%uses_random_access ) 
            (*self).__position_update = Null;

        (*self).__on_0x25_init();

        if ( __feat%foo@@D%uses_random_access ) 

            if ( (*self).__position_update ) {
                __cur = __cur.advance((*(*self).__position_update));
                (*self).__position_update = Null;
            }


        __error = (*self).__error;
        local strong_ref<stream> filtered = Null;

        if ( __feat%foo@@D%supports_filters ) 

            if ( filtered = spicy_rt::filter_init(self, __data, __cur) ) {
                local value_ref<stream> filtered_data = filtered;
                (*self).__parse_foo_D_stage2(filtered_data, (*filtered_data), __trim, __lah, __lahe, __error);
                __cur = __cur.advance(|__cur|);

                if ( __trim ) 
                    (*__data).trim(begin(__cur));

                __result = (__cur, __lah, __lahe, __error);
            }



        if ( ! filtered ) 
            __result = (*self).__parse_foo_D_stage2(__data, __cur, __trim, __lah, __lahe, __error);

    }
    catch ( hilti::SystemException __except ) {

        if ( __feat%foo@@D%uses_random_access ) 
            (*self).__position = begin(__cur);

        (*self).__on_0x25_error(hilti::exception_what(__except));

        if ( __feat%foo@@D%supports_filters ) 
            spicy_rt::filter_disconnect(self);

        (*self).__error = __error;

        if ( __feat%foo@@D%uses_random_access ) 
            (*self).__position_update = Null;

        (*self).__on_0x25_finally();

        if ( __feat%foo@@D%uses_random_access ) 

            if ( (*self).__position_update ) {
                __cur = __cur.advance((*(*self).__position_update));
                (*self).__position_update = Null;
            }


        __error = (*self).__error;
        throw;
    }

    (*self).__error = __error;

    if ( __feat%foo@@D%uses_random_access ) 
        (*self).__position_update = Null;

    (*self).__on_0x25_finally();

    if ( __feat%foo@@D%uses_random_access ) 

        if ( (*self).__position_update ) {
            __cur = __cur.advance((*(*self).__position_update));
            (*self).__position_update = Null;
        }


    __error = (*self).__error;
    return __result;
}

method method tuple<view<stream>, int<64>, iterator<stream>, optional<hilti::RecoverableFailure>> foo::D::__parse_foo_D_stage2(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error) {
    # "<...>/unused-functions.spicy:25:17-27:2"
    local tuple<view<stream>, int<64>, iterator<stream>, optional<hilti::RecoverableFailure>> __result;
    local value_ref<C> __transient_anon;
    # "<...>/unused-functions.spicy:24:10"

    # Begin parsing production: Unit: foo_C_2 ->
    __transient_anon = default<C>();
    (__cur, __lah, __lahe, __error) = (*__transient_anon).__parse_stage1(__data, __cur, __trim, __lah, __lahe, __error);
    # End parsing production: Unit: foo_C_2 ->

    if ( __feat%foo@@D%uses_random_access ) 
        (*self).__position = begin(__cur);


    if ( __feat%foo@@D%uses_random_access ) 
        (*self).__position = begin(__cur);

    (*self).__error = __error;

    if ( __feat%foo@@D%uses_random_access ) 
        (*self).__position_update = Null;

    (*self).__on_0x25_done();

    if ( __feat%foo@@D%uses_random_access ) 

        if ( (*self).__position_update ) {
            __cur = __cur.advance((*(*self).__position_update));
            (*self).__position_update = Null;
        }


    __error = (*self).__error;

    if ( __feat%foo@@D%supports_filters ) 
        spicy_rt::filter_disconnect(self);

    hilti::debugDedent("spicy");
    __result = (__cur, __lah, __lahe, __error);
    return __result;
}

method extern method view<stream> foo::D::parse1(inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static {
    # "<...>/unused-functions.spicy:25:17-27:2"
    local value_ref<D> unit = value_ref(default<D>())value_ref(default<D>());
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;
    local optional<hilti::RecoverableFailure> error = Null;
    # "<...>/unused-functions.spicy:25:17-27:2"

    # Begin parsing production: Unit: foo_D -> foo_C_2
    (ncur, lahead, lahead_end, error) = (*unit).__parse_stage1(data, ncur, True, lahead, lahead_end, error);
    # End parsing production: Unit: foo_D -> foo_C_2

    if ( __feat%foo@@D%uses_random_access ) 
        (*unit).__position = begin(ncur);


    if ( error ) 
        throw ;

    return ncur;
}

method extern method view<stream> foo::D::parse3(inout value_ref<spicy_rt::ParsedUnit> gunit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static {
    # "<...>/unused-functions.spicy:25:17-27:2"
    local value_ref<D> unit = value_ref(default<D>())value_ref(default<D>());
    spicy_rt::initializeParsedUnit(gunit, unit, typeinfo(D));
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;
    local optional<hilti::RecoverableFailure> error = Null;
    # "<...>/unused-functions.spicy:25:17-27:2"

    # Begin parsing production: Unit: foo_D -> foo_C_2
    (ncur, lahead, lahead_end, error) = (*unit).__parse_stage1(data, ncur, True, lahead, lahead_end, error);
    # End parsing production: Unit: foo_D -> foo_C_2

    if ( __feat%foo@@D%uses_random_access ) 
        (*unit).__position = begin(ncur);


    if ( error ) 
        throw ;

    return ncur;
}

method extern method view<stream> foo::D::parse2(inout value_ref<D> unit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static {
    # "<...>/unused-functions.spicy:25:17-27:2"
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;
    local optional<hilti::RecoverableFailure> error = Null;
    # "<...>/unused-functions.spicy:25:17-27:2"

    # Begin parsing production: Unit: foo_D -> foo_C_2
    (ncur, lahead, lahead_end, error) = (*unit).__parse_stage1(data, ncur, True, lahead, lahead_end, error);
    # End parsing production: Unit: foo_D -> foo_C_2

    if ( __feat%foo@@D%uses_random_access ) 
        (*unit).__position = begin(ncur);


    if ( error ) 
        throw ;

    return ncur;
}

init function void __register_foo_D() {
    foo::D::__parser = [$name="foo::D", $is_public=True, $parse1=foo::D::parse1, $parse2=foo::D::parse2, $parse3=foo::D::parse3, $context_new=Null, $type_info=typeinfo(D), $description="", $mime_types=vector(), $ports=vector()];
    spicy_rt::registerParser(foo::D::__parser, $scope, Null);
}

method method tuple<view<stream>, int<64>, iterator<stream>, optional<hilti::RecoverableFailure>> foo::F::__parse_stage1(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error) {
    # "<...>/unused-functions.spicy:30:10-32:2"
    local tuple<view<stream>, int<64>, iterator<stream>, optional<hilti::RecoverableFailure>> __result;
    try {

        if ( __feat%foo@@F%uses_random_access ) 
            __trim = False;

        hilti::debugIndent("spicy");

        if ( __feat%foo@@F%uses_random_access ) {
            (*self).__begin = begin(__cur);
            (*self).__position = begin(__cur);
        }

        (*self).__error = __error;

        if ( __feat%foo@@F%uses_random_access ) 
            (*self).__position_update = Null;

        (*self).__on_0x25_init();

        if ( __feat%foo@@F%uses_random_access ) 

            if ( (*self).__position_update ) {
                __cur = __cur.advance((*(*self).__position_update));
                (*self).__position_update = Null;
            }


        __error = (*self).__error;
        local strong_ref<stream> filtered = Null;

        if ( __feat%foo@@F%supports_filters ) 

            if ( filtered = spicy_rt::filter_init(self, __data, __cur) ) {
                local value_ref<stream> filtered_data = filtered;
                (*self).__parse_foo_F_stage2(filtered_data, (*filtered_data), __trim, __lah, __lahe, __error);
                __cur = __cur.advance(|__cur|);

                if ( __trim ) 
                    (*__data).trim(begin(__cur));

                __result = (__cur, __lah, __lahe, __error);
            }



        if ( ! filtered ) 
            __result = (*self).__parse_foo_F_stage2(__data, __cur, __trim, __lah, __lahe, __error);

    }
    catch ( hilti::SystemException __except ) {

        if ( __feat%foo@@F%uses_random_access ) 
            (*self).__position = begin(__cur);

        (*self).__on_0x25_error(hilti::exception_what(__except));

        if ( __feat%foo@@F%supports_filters ) 
            spicy_rt::filter_disconnect(self);


        if ( __feat%foo@@F%is_filter ) 
            spicy_rt::filter_forward_eod(self);

        (*self).__error = __error;

        if ( __feat%foo@@F%uses_random_access ) 
            (*self).__position_update = Null;

        (*self).__on_0x25_finally();

        if ( __feat%foo@@F%uses_random_access ) 

            if ( (*self).__position_update ) {
                __cur = __cur.advance((*(*self).__position_update));
                (*self).__position_update = Null;
            }


        __error = (*self).__error;
        throw;
    }

    (*self).__error = __error;

    if ( __feat%foo@@F%uses_random_access ) 
        (*self).__position_update = Null;

    (*self).__on_0x25_finally();

    if ( __feat%foo@@F%uses_random_access ) 

        if ( (*self).__position_update ) {
            __cur = __cur.advance((*(*self).__position_update));
            (*self).__position_update = Null;
        }


    __error = (*self).__error;
    return __result;
}

method method tuple<view<stream>, int<64>, iterator<stream>, optional<hilti::RecoverableFailure>> foo::F::__parse_foo_F_stage2(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error) {
    # "<...>/unused-functions.spicy:30:10-32:2"
    local tuple<view<stream>, int<64>, iterator<stream>, optional<hilti::RecoverableFailure>> __result;

    if ( __feat%foo@@F%uses_random_access ) 
        (*self).__position = begin(__cur);

    (*self).__error = __error;

    if ( __feat%foo@@F%uses_random_access ) 
        (*self).__position_update = Null;

    (*self).__on_0x25_done();

    if ( __feat%foo@@F%uses_random_access ) 

        if ( (*self).__position_update ) {
            __cur = __cur.advance((*(*self).__position_update));
            (*self).__position_update = Null;
        }


    __error = (*self).__error;

    if ( __feat%foo@@F%supports_filters ) 
        spicy_rt::filter_disconnect(self);


    if ( __feat%foo@@F%is_filter ) 
        spicy_rt::filter_forward_eod(self);

    hilti::debugDedent("spicy");
    __result = (__cur, __lah, __lahe, __error);
    return __result;
}

method extern method view<stream> foo::F::parse1(inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static {
    # "<...>/unused-functions.spicy:30:10-32:2"
    local value_ref<F> unit = value_ref(default<F>())value_ref(default<F>());
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;
    local optional<hilti::RecoverableFailure> error = Null;
    # "<...>/unused-functions.spicy:30:10-32:2"

    # Begin parsing production: Unit: foo_F ->
    (ncur, lahead, lahead_end, error) = (*unit).__parse_stage1(data, ncur, True, lahead, lahead_end, error);
    # End parsing production: Unit: foo_F ->

    if ( __feat%foo@@F%uses_random_access ) 
        (*unit).__position = begin(ncur);


    if ( error ) 
        throw ;

    return ncur;
}

method extern method view<stream> foo::F::parse3(inout value_ref<spicy_rt::ParsedUnit> gunit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static {
    # "<...>/unused-functions.spicy:30:10-32:2"
    local value_ref<F> unit = value_ref(default<F>())value_ref(default<F>());
    spicy_rt::initializeParsedUnit(gunit, unit, typeinfo(F));
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;
    local optional<hilti::RecoverableFailure> error = Null;
    # "<...>/unused-functions.spicy:30:10-32:2"

    # Begin parsing production: Unit: foo_F ->
    (ncur, lahead, lahead_end, error) = (*unit).__parse_stage1(data, ncur, True, lahead, lahead_end, error);
    # End parsing production: Unit: foo_F ->

    if ( __feat%foo@@F%uses_random_access ) 
        (*unit).__position = begin(ncur);


    if ( error ) 
        throw ;

    return ncur;
}

method extern method view<stream> foo::F::parse2(inout value_ref<F> unit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static {
    # "<...>/unused-functions.spicy:30:10-32:2"
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;
    local optional<hilti::RecoverableFailure> error = Null;
    # "<...>/unused-functions.spicy:30:10-32:2"

    # Begin parsing production: Unit: foo_F ->
    (ncur, lahead, lahead_end, error) = (*unit).__parse_stage1(data, ncur, True, lahead, lahead_end, error);
    # End parsing production: Unit: foo_F ->

    if ( __feat%foo@@F%uses_random_access ) 
        (*unit).__position = begin(ncur);


    if ( error ) 
        throw ;

    return ncur;
}

init function void __register_foo_F() {

    if ( __feat%foo@@F%is_filter || __feat%foo@@F%supports_sinks ) {
        foo::F::__parser = [$name="foo::F", $is_public=False, $parse1=foo::F::parse1, $parse2=foo::F::parse2, $parse3=foo::F::parse3, $context_new=Null, $type_info=typeinfo(F), $description="", $mime_types=vector(), $ports=vector()];
        spicy_rt::registerParser(foo::F::__parser, $scope, Null);
    }

}

}
