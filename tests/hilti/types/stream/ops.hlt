# @TEST-EXEC: ${HILTIC} -j %INPUT >output
# @TEST-EXEC: btest-diff output

module Foo {

import hilti;

global stream x;
x += b"1";
x += b"2";
x += b"";

assert x == b"12";
assert x != b"";
assert x != b"123";

hilti::print(x.statistics());

assert ! x.is_frozen();
x.freeze();
assert x.is_frozen();
assert-exception x += b"XXX";
x.unfreeze();
assert ! x.is_frozen();

global stream y = stream(b"0123456789");
assert begin(y) == y.at(0);
assert y.find(b"0") == (True, y.at(0));
assert y.find(b"234") == (True, y.at(2));
assert y.find(b"789") == (True, y.at(7));
assert y.find(b"890") == (False, y.at(8));
assert y.find(b"XYZ") == (False, end(y));
assert (b"456" in y);
assert ! (b"xyz" in y);
assert y.starts_with(b"012");
assert y.starts_with(b"");
assert ! y.starts_with(b"XYZ");
assert |y| == 10;

global stream m = stream(b"1234567890");
m.trim(m.at(5));
assert m == b"67890"; # More trim() tests in cc/rt-stream.cc

# Test const verasion
function void p(stream x) {
    assert x == b"abc";
    assert x != b"ABC";
    assert ! x.is_frozen();
    assert begin(x) == x.at(0);
    assert x.find(b"b") == (True, x.at(1));
    assert (b"b" in x);
    assert ! (b"X" in x);
    assert x.starts_with(b"ab");
    assert |x| == 3;
}

global stream x2 = stream(b"abc");
p(x2);

global auto q = b"def";
global auto qq = stream(b"abc" + q);
assert |qq| == 6 && qq.starts_with(b"abcdef");

}
